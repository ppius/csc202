Discussion Questions

1. 0, 1, 1

2.
    a. +*(AB) +* (CD) + (EF)
    b. +A(*(+BC)(+DE))
    c. *A *B *C +D +EF

3. 
    a.(AB+)(CD+)*(EF+)*
    b.A((BC+)(DE+)*)+
    c.AB* C* D* E+ F+

4. 
    a. '('  to  '+ ('  to  ' '  to  '*' '( *'  to  '+ ( *'  to   '*'  to  '*'  to  '( *'  to   '+ ( *'  to  '*';

    b. ' +'  to  '(  + ' to '( ( +'  to   '+ ( ( +' to '( +' to '* ( +' to '( * ( +' to '+ ( * ( +' to '* ( +' to '+'

    c. '*' to '*' to '*' to '+' to '+'

5.
    a. '2'  '32'  '6'  '46'  '10'
    b. '1'  '21'  '3'  '33'  '6'  '46'  '10'  '510'  '15' 
    c. '1'  '21'  '321'  '4321'  '54321'  '21605' '75926' '1640381230' '1640457156'

6. I believe the big-O performance would reverse because the the rear is no longer where the elements are being enqueued, instead it is where it is dequeued and would act more like a the Stack data structure. 
